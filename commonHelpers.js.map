{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\nconst startBtn = document.querySelector('[data-start]');\nstartBtn.disabled = true;\n\nlet userSelectedDate; \n\nconst options = {\n        altInput: true,\n        altFormat: \"F j, Y\",\n        dateFormat: \"Y-m-d\",\n        enableTime: true,\n        time_24hr: true,\n        defaultDate: new Date(),\n        minuteIncrement: 1,\n        \n          onClose(selectedDates) {\n              const userDate = new Date(selectedDates[0]).getTime();\n              const startDate = Date.now();\n              \n              if (userDate > startDate) {\n                          startBtn.disabled = false;\n                            userSelectedDate = userDate;\n                            const time = userDate - startDate;\n                            const { days, hours, minutes, seconds } = convertMs(time);\n                            \n                              const showdays = document.querySelector('[data-days]');\n                              showdays.textContent = days;\n\n                              const showhours = document.querySelector('[data-hours]');\n                              showhours.textContent = hours;\n\n                              const showminutes = document.querySelector('[data-minutes]');\n                              showminutes.textContent = minutes;\n\n                              const showseconds = document.querySelector('[data-seconds]');\n                              showseconds.textContent = seconds;\n              } else {             \n                      iziToast.error({\n                      fontSize: 'large',\n                      close:\tfalse,\n                      position:\t'topRight',\n                      messageColor: 'white',\n                      timeout:\t2000,\n                      backgroundColor: 'red',\n                      message:(\"Please choose a date in the future\")\n                      });\n                }\n        }\n};\n \nflatpickr('#datetime-picker', options);\n\nfunction convertMs(time) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(time / day);\n  // Remaining hours\n  const hours = Math.floor((time % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((time % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((time % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\n\nstartBtn.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  \n}\n\n\n\n\n\n// class Timer {\n  \n//   constructor(onTick) {\n//     this.onTick = onTick;\n//     this.interval = null;\n//    }\n\n//   start() { \n//     const startTime = Date.now();\n//     this.interval = setInterval((){\n//       const curentTime = Date.now();\n//       const delta = curentTime - startTime;\n//       const time = this.getTimeCompounents(delta);\n\n//       this.onTick(time);\n\n//     }, 1000)\n     \n//   }\n//   // add 0 on begin if onli one number \n//   Pad(value) {\n//     return String(value).padStart(2, '0'); \n//   }\n\n// }\n\n\n// const timer = new Timer({\n//   onTick: updateClockface\n// })\n\n// function updateClockface({days, hours, mins,secs }) {\n//   updateClockface.textContent = `${days}, ${hours}, ${mins},${secs}`\n// }\n\n\n// getTimeCompounents(time){\n//   const hours = this.pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n//   );\n//   const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n//   return { hours, mins, secs };    \n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["startBtn","options","selectedDates","userDate","startDate","time","days","hours","minutes","seconds","convertMs","showdays","showhours","showminutes","showseconds","iziToast","flatpickr","startTimer"],"mappings":"6vBAOA,MAAMA,EAAW,SAAS,cAAc,cAAc,EACtDA,EAAS,SAAW,GAIpB,MAAMC,EAAU,CACR,SAAU,GACV,UAAW,SACX,WAAY,QACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEf,QAAQC,EAAe,CACnB,MAAMC,EAAW,IAAI,KAAKD,EAAc,CAAC,CAAC,EAAE,UACtCE,EAAY,KAAK,MAEvB,GAAID,EAAWC,EAAW,CACdJ,EAAS,SAAW,GAElB,MAAMK,EAAOF,EAAWC,EAClB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EAEhDM,EAAW,SAAS,cAAc,aAAa,EACrDA,EAAS,YAAcL,EAEvB,MAAMM,EAAY,SAAS,cAAc,cAAc,EACvDA,EAAU,YAAcL,EAExB,MAAMM,EAAc,SAAS,cAAc,gBAAgB,EAC3DA,EAAY,YAAcL,EAE1B,MAAMM,EAAc,SAAS,cAAc,gBAAgB,EAC3DA,EAAY,YAAcL,CACxD,MACsBM,EAAS,MAAM,CACf,SAAU,QACV,MAAO,GACP,SAAU,WACV,aAAc,QACd,QAAS,IACT,gBAAiB,MACjB,QAAS,oCAC/B,CAAuB,CAEd,CACT,EAEAC,EAAU,mBAAoBf,CAAO,EAErC,SAASS,EAAUL,EAAM,CAQvB,MAAMC,EAAO,KAAK,MAAMD,EAAO,KAAG,EAE5BE,EAAQ,KAAK,MAAOF,EAAO,MAAO,IAAI,EAEtCG,EAAU,KAAK,MAAQH,EAAO,MAAO,KAAQ,GAAM,EAEnDI,EAAU,KAAK,MAASJ,EAAO,MAAO,KAAQ,IAAU,GAAM,EAEpE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAIAT,EAAS,iBAAiB,QAASiB,CAAU,EAE7C,SAASA,GAAa,CAEtB"}